SFC Stamp
    VAR_INPUT  CraneDown : BOOL; END_VAR 
    VAR_INPUT  CraneOnConveyor : BOOL; END_VAR 
    VAR_INPUT  CranePositionStamp : BOOL; END_VAR 
    VAR_INPUT  CraneSucked : BOOL; END_VAR 
    VAR_INPUT  CraneUp : BOOL; END_VAR 
    VAR  Duration : TIME := TIME#500.0ms; END_VAR 
    VAR  SFCInit : BOOL; END_VAR 
    VAR_INPUT  SFCReset : BOOL; END_VAR 
    VAR_OUTPUT  StampGreenLamp : BOOL; END_VAR 
    VAR_INPUT  StampLowered : BOOL; END_VAR 
    VAR_OUTPUT  StampPressure : BOOL; END_VAR 
    VAR_OUTPUT  StampPusher : BOOL; END_VAR 
    VAR_INPUT  StampSliderFilled : BOOL; END_VAR 
    VAR_OUTPUT  StampSliderMovedIn : BOOL; END_VAR 
    VAR_OUTPUT  StampSliderMovedOut : BOOL; END_VAR 
    VAR_INPUT  StampSliderSensorMovedIn : BOOL; END_VAR 
    VAR_INPUT  StampSliderSensorMovedOut : BOOL; END_VAR 
    VAR_INPUT  StampStartButton : BOOL; END_VAR 
    VAR_INPUT  StampUp : BOOL; END_VAR 
    VAR_OUTPUT  StampWhiteLamp : BOOL; END_VAR 
    VAR_OUTPUT  StartCommandStamp : BOOL; END_VAR 
    VAR_INPUT  StartVar : BOOL; END_VAR 
    VAR  Timer : TON; END_VAR 
    VAR  interconnect : BOOL; END_VAR 
    VAR  interconnectStampStartCommand : BOOL; END_VAR 
    
    STEP Green_Lamp
        ON active ACTION
            
            StampGreenLamp := TRUE;
            interconnectStampStartCommand := FALSE;
        END_ACTION
    END_STEP
    
    STEP Init
    END_STEP
    
    STEP Interstep
        ON active ACTION
            
            StartCommandStamp := TRUE;
        END_ACTION
    END_STEP
    
    STEP Interstep_2
    END_STEP
    
    STEP StampProcess
        ON active ACTION
            
            StampSliderMovedIn := FALSE;
            StampPusher := TRUE;
        END_ACTION
    END_STEP
    
    STEP StampSliderBack
        ON active ACTION
            
            StampSliderMovedIn := TRUE;
            StampSliderMovedOut := FALSE;
        END_ACTION
    END_STEP
    
    STEP StampSliderForward
        ON active ACTION
            
            StampPusher := FALSE;
            StampSliderMovedOut := TRUE;
            IF ((StampLowered = FALSE) AND (StampUp = TRUE)) THEN
                interconnect := FALSE;
            END_IF;
            Timer(IN := FALSE, PT := TIME#1.0ms);
        END_ACTION
    END_STEP
    
    STEP Stamp_Init_1
        ON active ACTION
            
            StampSliderMovedIn := TRUE;
            StampSliderMovedOut := FALSE;
        END_ACTION
    END_STEP
    
    STEP Stamp_Init_2
        ON active ACTION
            
            StampSliderMovedIn := FALSE;
            StampSliderMovedOut := TRUE;
        END_ACTION
    END_STEP
    
    STEP Stamp_Init_3
        ON active ACTION
            
            StampPusher := TRUE;
        END_ACTION
    END_STEP
    
    STEP Stamp_Init_4
        ON active ACTION
            
            StampPusher := FALSE;
        END_ACTION
    END_STEP
    
    STEP Start_Stamp
        ON active ACTION
            
            StampSliderMovedOut := FALSE;
            StampSliderMovedIn := FALSE;
            StampPusher := FALSE;
            StampGreenLamp := FALSE;
            StampPressure := FALSE;
            StartCommandStamp := FALSE;
            IF (StampStartButton = TRUE) THEN
                interconnectStampStartCommand := TRUE;
            END_IF;
        END_ACTION
    END_STEP
    
    STEP Step0
    END_STEP
    
    STEP Step1
        ON active ACTION
            
            Timer(IN := StampLowered, PT := TIME#);
            interconnect := Timer.Q;
        END_ACTION
    END_STEP
    
    STEP Step2
    END_STEP
    
    GOTO TRUE :: Green_Lamp -> Stamp_Init_1;
    GOTO TRUE :: Init -> Start_Stamp;
    GOTO StartVar :: Interstep -> Interstep_2;
    GOTO StampSliderFilled :: Interstep_2 -> Step0;
    GOTO StampLowered :: StampProcess -> Step1;
    GOTO StampSliderSensorMovedIn :: StampSliderBack -> StampProcess;
    GOTO StampSliderMovedOut :: StampSliderForward -> Step2;
    GOTO StampSliderSensorMovedIn :: Stamp_Init_1 -> Stamp_Init_2;
    GOTO StampSliderSensorMovedOut :: Stamp_Init_2 -> Stamp_Init_3;
    GOTO StampLowered :: Stamp_Init_3 -> Stamp_Init_4;
    GOTO StampUp :: Stamp_Init_4 -> Interstep;
    GOTO interconnectStampStartCommand :: Start_Stamp -> Green_Lamp;
    GOTO CraneUp :: Step0 -> StampSliderBack;
    GOTO interconnect :: Step1 -> StampSliderForward;
    GOTO CraneOnConveyor :: Step2 -> Interstep;
END_SFC
