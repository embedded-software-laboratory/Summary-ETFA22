SFC Pusher
    VAR  Duration2 : TIME := TIME#2.0s; END_VAR 
    VAR  Duration3 : TIME := TIME#200.0ms; END_VAR 
    VAR  Duration_Slide1_Black : TIME := TIME#950.0ms; END_VAR 
    VAR  Duration_Slide1_Metal : TIME := TIME#300.0ms; END_VAR 
    VAR  Duration_Slide1_White : TIME := TIME#300.0ms; END_VAR 
    VAR  Duration_Slide2_Black : TIME := TIME#2.0s; END_VAR 
    VAR  Duration_Slide2_Metal : TIME := TIME#370.0ms; END_VAR 
    VAR  Duration_Slide2_White : TIME := TIME#370.0ms; END_VAR 
    VAR  Priority_Var_Black : INT := INT#3; END_VAR 
    VAR  Priority_Var_Metal : INT := INT#3; END_VAR 
    VAR  Priority_Var_White : INT := INT#3; END_VAR 
    VAR_OUTPUT  PusherY1 : BOOL; END_VAR 
    VAR_OUTPUT  PusherY2 : BOOL; END_VAR 
    VAR  SFCInit : BOOL; END_VAR 
    VAR_INPUT  SFCReset : BOOL; END_VAR 
    VAR  Slide1_black : INT := INT#1; END_VAR 
    VAR  Slide1_metal : INT := INT#1; END_VAR 
    VAR  Slide1_white : INT := INT#1; END_VAR 
    VAR  Slide2_black : INT := INT#1; END_VAR 
    VAR  Slide2_metal : INT := INT#1; END_VAR 
    VAR  Slide2_white : INT := INT#1; END_VAR 
    VAR  Slide3_black : INT := INT#1; END_VAR 
    VAR  Slide3_metal : INT := INT#1; END_VAR 
    VAR  Slide3_white : INT := INT#1; END_VAR 
    VAR_INPUT  SorterCapacitiveSensorPusher1 : BOOL; END_VAR 
    VAR_INPUT  SorterCapacitiveSensorPusher2 : BOOL; END_VAR 
    VAR_INPUT  SorterLightbarrierCraneInterface : BOOL; END_VAR 
    VAR_INPUT  SorterLightnessSensorPusher1 : BOOL; END_VAR 
    VAR_INPUT  SorterLightnessSensorPusher2 : BOOL; END_VAR 
    VAR_INPUT  SorterLightnessSensorPusher3 : BOOL; END_VAR 
    VAR_INPUT  SorterLightnesssensorCraneInterfaceInverse : BOOL; END_VAR 
    VAR_INPUT  SorterPusher1MovedIn : BOOL; END_VAR 
    VAR_INPUT  SorterPusher1MovedOut : BOOL; END_VAR 
    VAR_INPUT  SorterPusher2MovedIn : BOOL; END_VAR 
    VAR_INPUT  SorterPusher2MovedOut : BOOL; END_VAR 
    VAR_INPUT  SorterStartButton : BOOL; END_VAR 
    VAR_INPUT  StartVar : BOOL; END_VAR 
    VAR  Timer2 : TON; END_VAR 
    VAR  Timer3 : TON; END_VAR 
    VAR  Timer_Slide1_Black : TON; END_VAR 
    VAR  Timer_Slide1_Metal : TON; END_VAR 
    VAR  Timer_Slide1_White : TON; END_VAR 
    VAR  Timer_Slide2_Black : TON; END_VAR 
    VAR  Timer_Slide2_Metal : TON; END_VAR 
    VAR  Timer_Slide2_White : TON; END_VAR 
    VAR  interconnect2 : BOOL; END_VAR 
    VAR  interconnect3 : BOOL; END_VAR 
    VAR  interconnect_Slide1_Black : BOOL; END_VAR 
    VAR  interconnect_Slide1_Metal : BOOL; END_VAR 
    VAR  interconnect_Slide1_White : BOOL; END_VAR 
    VAR  interconnect_Slide2_Black : BOOL; END_VAR 
    VAR  interconnect_Slide2_Metal : BOOL; END_VAR 
    VAR  interconnect_Slide2_White : BOOL; END_VAR 
    
    STEP Check_For_Black
    END_STEP
    
    STEP Check_For_Metal
    END_STEP
    
    STEP Check_For_White
    END_STEP
    
    STEP First_Slide_Timer_Black
        ON active ACTION
            
            IF (SorterLightnesssensorCraneInterfaceInverse = TRUE) THEN
                Timer_Slide1_Black(IN := SorterLightnesssensorCraneInterfaceInverse, PT := Duration_Slide1_Black);
                interconnect_Slide1_Black := Timer_Slide1_Black.Q;
            END_IF;
        END_ACTION
    END_STEP
    
    STEP First_Slide_Timer_Metal
        ON active ACTION
            
            Timer_Slide1_Metal(IN := TRUE, PT := Duration_Slide1_Metal);
            interconnect_Slide1_Metal := Timer_Slide1_Metal.Q;
        END_ACTION
    END_STEP
    
    STEP First_Slide_Timer_White
        ON active ACTION
            
            Timer_Slide1_White(IN := TRUE, PT := Duration_Slide1_White);
            interconnect_Slide1_White := Timer_Slide1_White.Q;
        END_ACTION
    END_STEP
    
    STEP First_Slide_black_workpieces
    END_STEP
    
    STEP First_Slide_metal_workpieces
    END_STEP
    
    STEP First_Slide_white_workpieces
    END_STEP
    
    STEP Init
    END_STEP
    
    STEP Interstep
        ON active ACTION
            
            PusherY1 := FALSE;
            PusherY2 := FALSE;
            interconnect2 := FALSE;
            interconnect3 := FALSE;
            StartVar := FALSE;
            interconnect_Slide1_Black := FALSE;
            interconnect_Slide2_Black := FALSE;
            interconnect_Slide1_White := FALSE;
            interconnect_Slide2_White := FALSE;
            interconnect_Slide1_Metal := FALSE;
            interconnect_Slide2_Metal := FALSE;
        END_ACTION
    END_STEP
    
    STEP Interstep_2
    END_STEP
    
    STEP PusherY1_Move_In_Black
        ON active ACTION
            
            IF ((SorterPusher1MovedOut = TRUE) AND (SorterPusher1MovedIn = FALSE)) THEN
                PusherY1 := FALSE;
            END_IF;
        END_ACTION
    END_STEP
    
    STEP PusherY1_Move_In_Metal
        ON active ACTION
            
            IF ((SorterPusher1MovedOut = TRUE) AND (SorterPusher1MovedIn = FALSE)) THEN
                PusherY1 := FALSE;
            END_IF;
        END_ACTION
    END_STEP
    
    STEP PusherY1_Move_In_White
        ON active ACTION
            
            IF ((SorterPusher1MovedOut = TRUE) AND (SorterPusher1MovedIn = FALSE)) THEN
                PusherY1 := FALSE;
            END_IF;
        END_ACTION
    END_STEP
    
    STEP PusherY1_Move_Out_Black
        ON active ACTION
            
            IF ((SorterPusher1MovedOut = FALSE) AND (SorterPusher1MovedIn = TRUE)) THEN
                PusherY1 := TRUE;
            END_IF;
        END_ACTION
    END_STEP
    
    STEP PusherY1_Move_Out_Metal
        ON active ACTION
            
            IF ((SorterPusher1MovedOut = FALSE) AND (SorterPusher1MovedIn = TRUE)) THEN
                PusherY1 := TRUE;
            END_IF;
        END_ACTION
    END_STEP
    
    STEP PusherY1_Move_Out_White
        ON active ACTION
            
            IF ((SorterPusher1MovedOut = FALSE) AND (SorterPusher1MovedIn = TRUE)) THEN
                PusherY1 := TRUE;
            END_IF;
        END_ACTION
    END_STEP
    
    STEP PusherY2_Move_In_Black
        ON active ACTION
            
            IF ((SorterPusher2MovedOut = TRUE) AND (SorterPusher2MovedIn = FALSE)) THEN
                PusherY2 := FALSE;
            END_IF;
        END_ACTION
    END_STEP
    
    STEP PusherY2_Move_In_Metal
        ON active ACTION
            
            IF ((SorterPusher2MovedOut = TRUE) AND (SorterPusher2MovedIn = FALSE)) THEN
                PusherY2 := FALSE;
            END_IF;
        END_ACTION
    END_STEP
    
    STEP PusherY2_Move_In_White
        ON active ACTION
            
            IF ((SorterPusher2MovedOut = TRUE) AND (SorterPusher2MovedIn = FALSE)) THEN
                PusherY2 := FALSE;
            END_IF;
        END_ACTION
    END_STEP
    
    STEP PusherY2_Move_Out_Black
        ON active ACTION
            
            IF ((SorterPusher2MovedOut = FALSE) AND (SorterPusher2MovedIn = TRUE)) THEN
                PusherY2 := TRUE;
            END_IF;
        END_ACTION
    END_STEP
    
    STEP PusherY2_Move_Out_Metal
        ON active ACTION
            
            IF ((SorterPusher2MovedOut = FALSE) AND (SorterPusher2MovedIn = TRUE)) THEN
                PusherY2 := TRUE;
            END_IF;
        END_ACTION
    END_STEP
    
    STEP PusherY2_Move_Out_White
        ON active ACTION
            
            IF ((SorterPusher2MovedOut = FALSE) AND (SorterPusher2MovedIn = TRUE)) THEN
                PusherY2 := TRUE;
            END_IF;
        END_ACTION
    END_STEP
    
    STEP Reset_interconnect3
        ON active ACTION
            
            interconnect2 := FALSE;
            Timer2(IN := FALSE, PT := TIME#);
            Slide3_black := (Slide3_black - INT#1);
            Priority_Var_Black := (Priority_Var_Black - INT#1);
        END_ACTION
    END_STEP
    
    STEP Reset_interconnect_Slide1_Black
        ON active ACTION
            
            interconnect3 := FALSE;
            Timer3(IN := FALSE, PT := TIME#);
            interconnect_Slide1_Black := FALSE;
            Timer_Slide1_Black(IN := FALSE, PT := TIME#);
            Slide1_black := (Slide1_black - INT#1);
            Priority_Var_Black := (Priority_Var_Black - INT#1);
        END_ACTION
    END_STEP
    
    STEP Reset_interconnect_Slide1_Metal
        ON active ACTION
            
            interconnect3 := FALSE;
            Timer3(IN := FALSE, PT := TIME#);
            interconnect_Slide1_Metal := FALSE;
            Timer_Slide1_Metal(IN := FALSE, PT := TIME#);
            Slide1_metal := (Slide1_metal - INT#1);
            Priority_Var_Metal := (Priority_Var_Metal - INT#1);
        END_ACTION
    END_STEP
    
    STEP Reset_interconnect_Slide1_White
        ON active ACTION
            
            interconnect3 := FALSE;
            Timer3(IN := FALSE, PT := TIME#);
            interconnect_Slide1_White := FALSE;
            Timer_Slide1_White(IN := FALSE, PT := TIME#);
            Slide1_white := (Slide1_white - INT#1);
            Priority_Var_White := (Priority_Var_White - INT#1);
        END_ACTION
    END_STEP
    
    STEP Reset_interconnect_Slide2_Black
        ON active ACTION
            
            interconnect3 := FALSE;
            Timer3(IN := FALSE, PT := TIME#);
            interconnect_Slide2_Black := FALSE;
            Timer_Slide2_Black(IN := FALSE, PT := TIME#);
            Slide2_black := (Slide2_black - INT#1);
            Priority_Var_Black := (Priority_Var_Black - INT#1);
        END_ACTION
    END_STEP
    
    STEP Reset_interconnect_Slide2_Metal
        ON active ACTION
            
            interconnect3 := FALSE;
            Timer3(IN := FALSE, PT := TIME#);
            interconnect_Slide2_Metal := FALSE;
            Timer_Slide2_Metal(IN := FALSE, PT := TIME#);
            Slide2_metal := (Slide2_metal - INT#1);
            Priority_Var_Metal := (Priority_Var_Metal - INT#1);
        END_ACTION
    END_STEP
    
    STEP Reset_interconnect_Slide2_White
        ON active ACTION
            
            interconnect3 := FALSE;
            Timer3(IN := FALSE, PT := TIME#);
            interconnect_Slide2_White := FALSE;
            Timer_Slide2_White(IN := FALSE, PT := TIME#);
            Slide2_white := (Slide2_white - INT#1);
            Priority_Var_White := (Priority_Var_White - INT#1);
        END_ACTION
    END_STEP
    
    STEP Reset_interconnect_Slide3_Metal
        ON active ACTION
            
            interconnect3 := FALSE;
            Timer3(IN := FALSE, PT := TIME#);
            Slide3_metal := (Slide3_metal - INT#1);
            Priority_Var_Metal := (Priority_Var_Metal - INT#1);
        END_ACTION
    END_STEP
    
    STEP Reset_interconnect_Slide3_White
        ON active ACTION
            
            interconnect3 := FALSE;
            Timer3(IN := FALSE, PT := TIME#);
            Slide3_white := (Slide3_white - INT#1);
            Priority_Var_White := (Priority_Var_White - INT#1);
        END_ACTION
    END_STEP
    
    STEP Second_Slide_Timer_Black
        ON active ACTION
            
            IF (SorterLightnesssensorCraneInterfaceInverse = TRUE) THEN
                Timer_Slide2_Black(IN := SorterLightnesssensorCraneInterfaceInverse, PT := Duration_Slide2_Black);
                interconnect_Slide2_Black := Timer_Slide2_Black.Q;
            END_IF;
        END_ACTION
    END_STEP
    
    STEP Second_Slide_Timer_Metal
        ON active ACTION
            
            Timer_Slide2_Metal(IN := TRUE, PT := Duration_Slide2_Metal);
            interconnect_Slide2_Metal := Timer_Slide2_Metal.Q;
        END_ACTION
    END_STEP
    
    STEP Second_Slide_Timer_White
        ON active ACTION
            
            Timer_Slide2_White(IN := TRUE, PT := Duration_Slide2_White);
            interconnect_Slide2_White := Timer_Slide2_White.Q;
        END_ACTION
    END_STEP
    
    STEP Second_Slide_black_workpieces
    END_STEP
    
    STEP Second_Slide_metal_workpieces
    END_STEP
    
    STEP Second_Slide_white_workpieces
    END_STEP
    
    STEP Second_Test_For_Metal
    END_STEP
    
    STEP Second_Test_For_White
    END_STEP
    
    STEP Third_Slide_black_workpieces
    END_STEP
    
    STEP Third_Slide_metal_workpieces
    END_STEP
    
    STEP Third_Slide_white_workpieces
    END_STEP
    
    STEP Wait_Black
        ON active ACTION
            
            IF ((NOT SorterLightnessSensorPusher2 AND NOT SorterCapacitiveSensorPusher2) = TRUE) THEN
                Timer2(IN := (NOT SorterLightnessSensorPusher2 AND NOT SorterCapacitiveSensorPusher2), PT := Duration2);
                interconnect2 := Timer2.Q;
            END_IF;
        END_ACTION
    END_STEP
    
    STEP Wait_Metal
        ON active ACTION
            
            Timer3(IN := TRUE, PT := Duration3);
            interconnect3 := Timer3.Q;
        END_ACTION
    END_STEP
    
    STEP Wait_White
        ON active ACTION
            
            Timer3(IN := TRUE, PT := Duration3);
            interconnect3 := Timer3.Q;
        END_ACTION
    END_STEP
    
    STEP Wait_Y1_Black
        ON active ACTION
            
            IF (PusherY1 = TRUE) THEN
                Timer3(IN := PusherY1, PT := Duration3);
                interconnect3 := Timer3.Q;
            END_IF;
        END_ACTION
    END_STEP
    
    STEP Wait_Y1_Metal
        ON active ACTION
            
            IF (PusherY1 = TRUE) THEN
                Timer3(IN := PusherY1, PT := Duration3);
                interconnect3 := Timer3.Q;
            END_IF;
        END_ACTION
    END_STEP
    
    STEP Wait_Y1_White
        ON active ACTION
            
            IF (PusherY1 = TRUE) THEN
                Timer3(IN := PusherY1, PT := Duration3);
                interconnect3 := Timer3.Q;
            END_IF;
        END_ACTION
    END_STEP
    
    STEP Wait_Y2_Black
        ON active ACTION
            
            IF (PusherY2 = TRUE) THEN
                Timer3(IN := PusherY2, PT := Duration3);
                interconnect3 := Timer3.Q;
            END_IF;
        END_ACTION
    END_STEP
    
    STEP Wait_Y2_Metal
        ON active ACTION
            
            IF (PusherY2 = TRUE) THEN
                Timer3(IN := PusherY2, PT := Duration3);
                interconnect3 := Timer3.Q;
            END_IF;
        END_ACTION
    END_STEP
    
    STEP Wait_Y2_White
        ON active ACTION
            
            IF (PusherY2 = TRUE) THEN
                Timer3(IN := PusherY2, PT := Duration3);
                interconnect3 := Timer3.Q;
            END_IF;
        END_ACTION
    END_STEP
    
    GOTO ((Slide3_black = INT#1) AND (Priority_Var_Black = INT#3)) :: Check_For_Black -> Third_Slide_black_workpieces;
    GOTO ((Slide2_black = INT#1) AND (Priority_Var_Black = INT#2)) :: Check_For_Black -> Second_Slide_black_workpieces;
    GOTO ((Slide1_black = INT#1) AND (Priority_Var_Black = INT#1)) :: Check_For_Black -> First_Slide_black_workpieces;
    GOTO ((Slide1_metal = INT#1) AND (Priority_Var_Metal = INT#1)) :: Check_For_Metal -> First_Slide_metal_workpieces;
    GOTO ((Slide3_metal = INT#1) AND (Priority_Var_Metal = INT#3)) :: Check_For_Metal -> Third_Slide_metal_workpieces;
    GOTO ((Slide2_metal = INT#1) AND (Priority_Var_Metal = INT#2)) :: Check_For_Metal -> Second_Slide_metal_workpieces;
    GOTO ((Slide3_white = INT#1) AND (Priority_Var_White = INT#3)) :: Check_For_White -> Third_Slide_white_workpieces;
    GOTO ((Slide2_white = INT#1) AND (Priority_Var_White = INT#2)) :: Check_For_White -> Second_Slide_white_workpieces;
    GOTO ((Slide1_white = INT#1) AND (Priority_Var_White = INT#1)) :: Check_For_White -> First_Slide_white_workpieces;
    GOTO interconnect_Slide1_Black :: First_Slide_Timer_Black -> PusherY1_Move_Out_Black;
    GOTO interconnect_Slide1_Metal :: First_Slide_Timer_Metal -> PusherY1_Move_Out_Metal;
    GOTO interconnect_Slide1_White :: First_Slide_Timer_White -> PusherY1_Move_Out_White;
    GOTO TRUE :: First_Slide_black_workpieces -> First_Slide_Timer_Black;
    GOTO TRUE :: First_Slide_metal_workpieces -> First_Slide_Timer_Metal;
    GOTO TRUE :: First_Slide_white_workpieces -> First_Slide_Timer_White;
    GOTO StartVar :: Init -> Interstep;
    GOTO TRUE :: Interstep -> Interstep_2;
    GOTO ((SorterLightnessSensorPusher1 AND SorterCapacitiveSensorPusher1) AND (Priority_Var_Metal > INT#0)) :: Interstep_2 -> Check_For_Metal;
    GOTO ((NOT SorterLightnesssensorCraneInterfaceInverse AND SorterLightbarrierCraneInterface) AND (Priority_Var_Black > INT#0)) :: Interstep_2 -> Check_For_Black;
    GOTO ((SorterLightnessSensorPusher1 AND NOT SorterCapacitiveSensorPusher1) AND (Priority_Var_White > INT#0)) :: Interstep_2 -> Check_For_White;
    GOTO SorterPusher1MovedIn :: PusherY1_Move_In_Black -> Reset_interconnect_Slide1_Black;
    GOTO SorterPusher1MovedIn :: PusherY1_Move_In_Metal -> Reset_interconnect_Slide1_Metal;
    GOTO SorterPusher1MovedIn :: PusherY1_Move_In_White -> Reset_interconnect_Slide1_White;
    GOTO SorterPusher1MovedOut :: PusherY1_Move_Out_Black -> Wait_Y1_Black;
    GOTO SorterPusher1MovedOut :: PusherY1_Move_Out_Metal -> Wait_Y1_Metal;
    GOTO SorterPusher1MovedOut :: PusherY1_Move_Out_White -> Wait_Y1_White;
    GOTO SorterPusher2MovedIn :: PusherY2_Move_In_Black -> Reset_interconnect_Slide2_Black;
    GOTO SorterPusher2MovedIn :: PusherY2_Move_In_Metal -> Reset_interconnect_Slide2_Metal;
    GOTO SorterPusher2MovedIn :: PusherY2_Move_In_White -> Reset_interconnect_Slide2_White;
    GOTO SorterPusher2MovedOut :: PusherY2_Move_Out_Black -> Wait_Y2_Black;
    GOTO SorterPusher2MovedOut :: PusherY2_Move_Out_Metal -> Wait_Y2_Metal;
    GOTO SorterPusher2MovedOut :: PusherY2_Move_Out_White -> Wait_Y2_White;
    GOTO TRUE :: Reset_interconnect3 -> Interstep_2;
    GOTO TRUE :: Reset_interconnect_Slide1_Black -> Interstep_2;
    GOTO TRUE :: Reset_interconnect_Slide1_Metal -> Interstep_2;
    GOTO TRUE :: Reset_interconnect_Slide1_White -> Interstep_2;
    GOTO TRUE :: Reset_interconnect_Slide2_Black -> Interstep_2;
    GOTO TRUE :: Reset_interconnect_Slide2_Metal -> Interstep_2;
    GOTO TRUE :: Reset_interconnect_Slide2_White -> Interstep_2;
    GOTO TRUE :: Reset_interconnect_Slide3_Metal -> Interstep_2;
    GOTO TRUE :: Reset_interconnect_Slide3_White -> Interstep_2;
    GOTO interconnect_Slide2_Black :: Second_Slide_Timer_Black -> PusherY2_Move_Out_Black;
    GOTO interconnect_Slide2_Metal :: Second_Slide_Timer_Metal -> PusherY2_Move_Out_Metal;
    GOTO interconnect_Slide2_White :: Second_Slide_Timer_White -> PusherY2_Move_Out_White;
    GOTO TRUE :: Second_Slide_black_workpieces -> Second_Slide_Timer_Black;
    GOTO (SorterLightnessSensorPusher2 AND SorterCapacitiveSensorPusher2) :: Second_Slide_metal_workpieces -> Second_Test_For_Metal;
    GOTO (SorterLightnessSensorPusher2 AND NOT SorterCapacitiveSensorPusher2) :: Second_Slide_white_workpieces -> Second_Test_For_White;
    GOTO TRUE :: Second_Test_For_Metal -> Second_Slide_Timer_Metal;
    GOTO TRUE :: Second_Test_For_White -> Second_Slide_Timer_White;
    GOTO (NOT SorterLightnessSensorPusher2 AND NOT SorterCapacitiveSensorPusher2) :: Third_Slide_black_workpieces -> Wait_Black;
    GOTO (SorterLightnessSensorPusher2 AND SorterCapacitiveSensorPusher2) :: Third_Slide_metal_workpieces -> Wait_Metal;
    GOTO (SorterLightnessSensorPusher2 AND NOT SorterCapacitiveSensorPusher2) :: Third_Slide_white_workpieces -> Wait_White;
    GOTO interconnect2 :: Wait_Black -> Reset_interconnect3;
    GOTO interconnect3 :: Wait_Metal -> Reset_interconnect_Slide3_Metal;
    GOTO interconnect3 :: Wait_White -> Reset_interconnect_Slide3_White;
    GOTO interconnect3 :: Wait_Y1_Black -> PusherY1_Move_In_Black;
    GOTO interconnect3 :: Wait_Y1_Metal -> PusherY1_Move_In_Metal;
    GOTO interconnect3 :: Wait_Y1_White -> PusherY1_Move_In_White;
    GOTO interconnect3 :: Wait_Y2_Black -> PusherY2_Move_In_Black;
    GOTO interconnect3 :: Wait_Y2_Metal -> PusherY2_Move_In_Metal;
    GOTO interconnect3 :: Wait_Y2_White -> PusherY2_Move_In_White;
END_SFC
